/*
 * The User API
 *
 * API to manage teams, members and tokens
 *
 * API version: 1.3.13 bordering-jerilyn
 * Contact: dev@lab5e.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userapi

import (
	"encoding/json"
)

// RequestInviteDetails struct for RequestInviteDetails
type RequestInviteDetails struct {
	// The invite code.
	Code *string `json:"code,omitempty"`
}

// NewRequestInviteDetails instantiates a new RequestInviteDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestInviteDetails() *RequestInviteDetails {
	this := RequestInviteDetails{}
	return &this
}

// NewRequestInviteDetailsWithDefaults instantiates a new RequestInviteDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestInviteDetailsWithDefaults() *RequestInviteDetails {
	this := RequestInviteDetails{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RequestInviteDetails) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestInviteDetails) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RequestInviteDetails) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RequestInviteDetails) SetCode(v string) {
	o.Code = &v
}

func (o RequestInviteDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	return json.Marshal(toSerialize)
}

type NullableRequestInviteDetails struct {
	value *RequestInviteDetails
	isSet bool
}

func (v NullableRequestInviteDetails) Get() *RequestInviteDetails {
	return v.value
}

func (v *NullableRequestInviteDetails) Set(val *RequestInviteDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestInviteDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestInviteDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestInviteDetails(val *RequestInviteDetails) *NullableRequestInviteDetails {
	return &NullableRequestInviteDetails{value: val, isSet: true}
}

func (v NullableRequestInviteDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestInviteDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


